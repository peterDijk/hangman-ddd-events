version: '3.4'

services:
  eventstore.db:
    image: eventstore/eventstore:20.6.1-buster-slim
    environment:
      - EVENTSTORE_CLUSTER_SIZE=1
      - EVENTSTORE_RUN_PROJECTIONS=All
      - EVENTSTORE_START_STANDARD_PROJECTIONS=true
      - EVENTSTORE_EXT_TCP_PORT=1113
      - EVENTSTORE_EXT_HTTP_PORT=2113
      - EVENTSTORE_INSECURE=true
      - EVENTSTORE_ENABLE_EXTERNAL_TCP=true
      - EVENTSTORE_ENABLE_ATOM_PUB_OVER_HTTP=true
    ports:
      - '1113:1113'
      - '2113:2113'
    volumes:
      - type: volume
        source: eventstore-volume-data
        target: /var/lib/eventstore
      - type: volume
        source: eventstore-volume-logs
        target: /var/log/eventstore
    networks:
      - backend

  hangman-ddd-events:
    build:
      context: '.'
    command: ${CONTAINER_COMMAND}
    restart: always
    deploy:
      mode: replicated
      replicas: ${CONTAINER_SCALE}
      # above is ignored by dc up and dc run (only when deploy to swarm with docker stack deploy)
    depends_on:
      - eventstore.db
      # service wont be started before this service is running
    env_file:
      - './development.env'
    environment:
      - EVENT_STORE_HOSTNAME=eventstore.db
      - CONTAINER_PORT=${CONTAINER_PORT}
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:7070']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    ports:
      - '${APP_PORT}:${CONTAINER_PORT}'
    volumes:
      - './src:/app/src'
    links:
      - eventstore.db
      # by default, any service can reach any other service at that serviceâ€™s name.
    networks:
      - backend

volumes:
  eventstore-volume-data:
  eventstore-volume-logs:

networks:
  backend:
    driver: bridge
